{"version":3,"file":"shared-ui-Button-Button-stories.83a82a00be7a82303e00.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;ACFA;AAEA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;;;;;;;;;;;;;;;;ACdA;AACA;AAOA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AAAA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAZA;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA","sources":["webpack://production/./src/app/providers/ThemeProvider/index.ts","webpack://production/./src/app/providers/ThemeProvider/lib/ThemeContext.ts","webpack://production/./src/app/providers/ThemeProvider/lib/useTheme.ts","webpack://production/./src/app/providers/ThemeProvider/ui/ThemeProvider.tsx","webpack://production/./src/shared/config/storybook/ThemeDecorator.tsx"],"sourcesContent":["import { Theme } from './lib/ThemeContext';\r\nimport { useTheme } from './lib/useTheme';\r\nimport ThemeProvider from './ui/ThemeProvider';\r\n\r\nexport { ThemeProvider, Theme, useTheme };\r\n","import { createContext } from 'react';\r\n\r\nexport enum Theme {\r\n  LIGHT = 'light',\r\n  DARK = 'dark',\r\n}\r\n\r\nexport interface ThemeContextProps {\r\n  theme?: Theme;\r\n  setTheme?: (theme: Theme) => void;\r\n}\r\n\r\nexport const ThemeContext = createContext<ThemeContextProps>({});\r\n\r\nexport const LOCAL_STORAGE_THEME_KEY = 'theme';\r\n","import React from 'react';\r\nimport { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from './ThemeContext';\r\n\r\nexport interface useThemeResult {\r\n  theme: Theme;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const useTheme = (): useThemeResult => {\r\n    const { theme, setTheme } = React.useContext(ThemeContext);\r\n\r\n    const toggleTheme = () => {\r\n        const newTheme = theme === Theme.LIGHT ? Theme.DARK : Theme.LIGHT;\r\n        setTheme(newTheme);\r\n        localStorage.setItem(LOCAL_STORAGE_THEME_KEY, newTheme);\r\n    };\r\n\r\n    return { theme, toggleTheme };\r\n};\r\n","import React, { FC } from 'react';\r\nimport { LOCAL_STORAGE_THEME_KEY, Theme, ThemeContext } from '../lib/ThemeContext';\r\n\r\nconst defaultTheme = (localStorage.getItem(LOCAL_STORAGE_THEME_KEY) as Theme) || Theme.LIGHT;\r\n\r\nconst ThemeProvider: FC = ({ children }) => {\r\n    const [theme, setTheme] = React.useState<Theme>(defaultTheme);\r\n\r\n    const defaultProps = React.useMemo(\r\n        () => ({\r\n            theme,\r\n            setTheme,\r\n        }),\r\n        [theme],\r\n    );\r\n\r\n    return <ThemeContext.Provider value={defaultProps}>{children}</ThemeContext.Provider>;\r\n};\r\n\r\nexport default ThemeProvider;\r\n","import { Decorator } from '@storybook/react';\r\nimport { Theme, ThemeProvider } from 'app/providers/ThemeProvider';\r\n\r\nexport const ThemeDecorator = (theme: Theme): Decorator => (Story) => (\r\n    <div className={`app ${theme}`}>\r\n        <ThemeProvider>\r\n            <Story />\r\n        </ThemeProvider>\r\n\r\n    </div>\r\n);\r\n"],"names":[],"sourceRoot":""}